{"version":3,"file":"static/js/main.54b06e8c.js","mappings":"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","sources":["index.js"],"sourcesContent":["// Enhanced JavaScript with Chatbot Integration and Improved Authentication - AyurSutra\n\n// ===== GLOBAL VARIABLES =====\nlet currentTherapy = 'vamana';\nlet isMenuOpen = false;\nlet isChatbotOpen = false;\n\n// ===== DOM CONTENT LOADED =====\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeApp();\n});\n\n// ===== INITIALIZATION =====\nfunction initializeApp() {\n    initializeNavigation();\n    initializeAnimations();\n    initializeCounters();\n    initializeProgressChart();\n    initializeIntersectionObserver();\n    initializeTherapyTabs();\n    initializeForms();\n    initializeChatbot();\n    initializeAuthSystem();\n    enhanceModals();\n}\n\n// ===== CHATBOT INTEGRATION =====\nfunction initializeChatbot() {\n    // Create chatbot toggle button\n    const chatbotToggle = document.createElement('button');\n    chatbotToggle.className = 'chatbot-toggle';\n    chatbotToggle.innerHTML = '💬';\n    chatbotToggle.setAttribute('aria-label', 'Open AyurBot Assistant');\n    chatbotToggle.title = 'Chat with AyurBot - Your Ayurvedic Assistant';\n    \n    // Add floating animation and glow effect\n    chatbotToggle.addEventListener('mouseenter', () => {\n        chatbotToggle.style.transform = 'scale(1.15)';\n        chatbotToggle.style.boxShadow = '0 8px 30px rgba(76, 175, 80, 0.5)';\n    });\n    \n    chatbotToggle.addEventListener('mouseleave', () => {\n        chatbotToggle.style.transform = 'scale(1)';\n        chatbotToggle.style.boxShadow = '0 4px 20px rgba(76, 175, 80, 0.3)';\n    });\n    \n    chatbotToggle.addEventListener('click', toggleChatbot);\n    document.body.appendChild(chatbotToggle);\n    \n    // Create chatbot container\n    createChatbotInterface();\n    \n    // Show welcome notification after delay\n    setTimeout(() => {\n        if (!getCookie('chatbot_welcomed')) {\n            showChatbotNotification();\n            setCookie('chatbot_welcomed', 'true', 7);\n        }\n    }, 3000);\n}\n\nfunction createChatbotInterface() {\n    const chatbotHTML = `\n        <div id=\"chatbot-container\" class=\"chatbot-overlay\" style=\"display: none;\">\n            <div class=\"chatbot-container\">\n                <!-- Header -->\n                <div class=\"chatbot-header\">\n                    <div class=\"bot-avatar\">\n                        <div class=\"avatar-icon\">🤖</div>\n                        <div class=\"status-indicator\"></div>\n                    </div>\n                    <div class=\"bot-info\">\n                        <h3>AyurBot</h3>\n                        <p>Your Ayurvedic Wellness Assistant</p>\n                    </div>\n                    <button class=\"close-button\" onclick=\"toggleChatbot()\">\n                        <i class=\"fas fa-times\"></i>\n                    </button>\n                </div>\n\n                <!-- Messages Area -->\n                <div class=\"messages-container\" id=\"chatbot-messages\">\n                    <div class=\"message bot-message\">\n                        <div class=\"message-avatar\">🤖</div>\n                        <div class=\"message-content\">\n                            <div class=\"message-bubble\">\n                                <div class=\"message-text\">🙏 Namaste! I'm AyurBot, your Ayurvedic wellness assistant at AyurSutra. How can I help you today?</div>\n                                <div class=\"message-time\">${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <!-- Quick Actions -->\n                    <div class=\"quick-actions\">\n                        <p class=\"quick-actions-title\">Choose a topic to get started:</p>\n                        <div class=\"quick-actions-grid\">\n                            <button class=\"quick-action-button\" onclick=\"handleQuickAction('dosha')\">\n                                <span class=\"action-icon\">🧘</span>\n                                <span class=\"action-text\">Find my Dosha</span>\n                            </button>\n                            <button class=\"quick-action-button\" onclick=\"handleQuickAction('remedies')\">\n                                <span class=\"action-icon\">💊</span>\n                                <span class=\"action-text\">Natural Remedies</span>\n                            </button>\n                            <button class=\"quick-action-button\" onclick=\"handleQuickAction('booking')\">\n                                <span class=\"action-icon\">📅</span>\n                                <span class=\"action-text\">Book Therapy</span>\n                            </button>\n                            <button class=\"quick-action-button\" onclick=\"handleQuickAction('diet')\">\n                                <span class=\"action-icon\">🥗</span>\n                                <span class=\"action-text\">Diet Advice</span>\n                            </button>\n                            <button class=\"quick-action-button\" onclick=\"handleQuickAction('herbs')\">\n                                <span class=\"action-icon\">🌿</span>\n                                <span class=\"action-text\">Herb Guide</span>\n                            </button>\n                            <button class=\"quick-action-button\" onclick=\"handleQuickAction('faq')\">\n                                <span class=\"action-icon\">❓</span>\n                                <span class=\"action-text\">FAQ</span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Input Area -->\n                <div class=\"input-container\">\n                    <div class=\"input-wrapper\">\n                        <textarea\n                            id=\"chatbot-input\"\n                            placeholder=\"Ask me about Ayurveda, book therapies, or get wellness advice...\"\n                            class=\"message-input\"\n                            rows=\"1\"\n                            onkeypress=\"handleChatbotKeyPress(event)\"\n                        ></textarea>\n                        <button class=\"send-button\" onclick=\"sendChatMessage()\">\n                            <i class=\"fas fa-paper-plane\"></i>\n                        </button>\n                    </div>\n                    <div class=\"input-footer\">\n                        <span class=\"disclaimer\">\n                            🌿 For serious health concerns, please consult with our certified practitioners at AyurSutra\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    document.body.insertAdjacentHTML('beforeend', chatbotHTML);\n}\n\nfunction toggleChatbot() {\n    const chatbotContainer = document.getElementById('chatbot-container');\n    const chatbotToggle = document.querySelector('.chatbot-toggle');\n    \n    isChatbotOpen = !isChatbotOpen;\n    \n    if (isChatbotOpen) {\n        chatbotContainer.style.display = 'flex';\n        chatbotToggle.style.display = 'none';\n        document.body.style.overflow = 'hidden'; // Prevent background scrolling on mobile\n        \n        // Focus on input\n        setTimeout(() => {\n            document.getElementById('chatbot-input').focus();\n        }, 300);\n    } else {\n        chatbotContainer.style.display = 'none';\n        chatbotToggle.style.display = 'flex';\n        document.body.style.overflow = 'auto';\n    }\n}\n\nfunction handleQuickAction(action) {\n    const userMessage = getQuickActionText(action);\n    addChatMessage(userMessage, 'user');\n    hideQuickActions();\n    \n    setTimeout(() => {\n        const botResponse = getBotResponse(action);\n        addChatMessage(botResponse.text, 'bot', botResponse.followUp);\n    }, 1000);\n}\n\nfunction getQuickActionText(action) {\n    const actionTexts = {\n        'dosha': 'Find my Dosha',\n        'remedies': 'Natural Remedies',\n        'booking': 'Book Therapy',\n        'diet': 'Diet Advice',\n        'herbs': 'Herb Guide',\n        'faq': 'FAQ'\n    };\n    return actionTexts[action] || action;\n}\n\nfunction getBotResponse(action) {\n    const responses = {\n        'dosha': {\n            text: \"I'd love to help you discover your Dosha! Your Dosha (Vata, Pitta, or Kapha) determines your unique constitution. There are three types:\\n\\n🌬️ **Vata** - Air & Space (Creative, energetic)\\n🔥 **Pitta** - Fire & Water (Focused, driven)\\n🌍 **Kapha** - Earth & Water (Calm, steady)\\n\\nWould you like to start a quick assessment? 🌟\",\n            followUp: ['Start Dosha Quiz', 'Learn about Doshas', 'Book consultation']\n        },\n        'remedies': {\n            text: \"Ayurveda offers wonderful natural remedies! What specific condition would you like help with? Here are some common ones:\",\n            followUp: ['Digestive issues', 'Stress & anxiety', 'Sleep problems', 'Joint pain', 'Skin concerns']\n        },\n        'booking': {\n            text: \"Excellent choice! Our AyurSutra Panchakarma therapies can transform your wellness journey. Which therapy interests you? 🌸\",\n            followUp: ['Abhyanga (Oil Massage)', 'Shirodhara (Oil Pouring)', 'Swedana (Steam Therapy)', 'Basti (Medicated Enema)', 'See all therapies']\n        },\n        'diet': {\n            text: \"Ayurvedic nutrition is personalized based on your Dosha! Tell me about your concerns:\",\n            followUp: ['Weight management', 'Digestive health', 'Energy levels', 'Seasonal eating', 'Food combinations']\n        },\n        'herbs': {\n            text: \"Ayurvedic herbs are nature's pharmacy! Which category interests you? 🌱\",\n            followUp: ['Immunity boosters', 'Stress relievers', 'Digestive aids', 'Beauty herbs', 'Energy enhancers']\n        },\n        'faq': {\n            text: \"Here are answers to common questions about Ayurveda and our AyurSutra services:\",\n            followUp: ['What is Panchakarma?', 'How long is treatment?', 'Is it safe?', 'Pricing information', 'Contact specialist']\n        }\n    };\n    \n    return responses[action] || {\n        text: \"I'm here to help with your Ayurvedic wellness journey at AyurSutra! How can I assist you today?\",\n        followUp: []\n    };\n}\n\nfunction handleChatbotKeyPress(event) {\n    if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        sendChatMessage();\n    }\n}\n\nfunction sendChatMessage() {\n    const input = document.getElementById('chatbot-input');\n    const message = input.value.trim();\n    \n    if (!message) return;\n    \n    addChatMessage(message, 'user');\n    input.value = '';\n    hideQuickActions();\n    \n    // Show typing indicator\n    showTypingIndicator();\n    \n    setTimeout(() => {\n        hideTypingIndicator();\n        const response = generateBotResponse(message);\n        addChatMessage(response.text, 'bot', response.followUp);\n    }, 1500);\n}\n\nfunction addChatMessage(text, sender, followUp = null) {\n    const messagesContainer = document.getElementById('chatbot-messages');\n    const timestamp = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\n    \n    const messageHTML = `\n        <div class=\"message ${sender}-message\">\n            ${sender === 'bot' ? '<div class=\"message-avatar\">🤖</div>' : ''}\n            <div class=\"message-content\">\n                <div class=\"message-bubble\">\n                    <div class=\"message-text\">${text}</div>\n                    <div class=\"message-time\">${timestamp}</div>\n                </div>\n                ${followUp ? createFollowUpButtons(followUp) : ''}\n            </div>\n            ${sender === 'user' ? '<div class=\"message-avatar user-avatar\">👤</div>' : ''}\n        </div>\n    `;\n    \n    messagesContainer.insertAdjacentHTML('beforeend', messageHTML);\n    scrollChatToBottom();\n}\n\nfunction createFollowUpButtons(followUp) {\n    const buttons = followUp.map(text => \n        `<button class=\"follow-up-button\" onclick=\"handleFollowUp('${text}')\">${text}</button>`\n    ).join('');\n    \n    return `<div class=\"follow-up-actions\">${buttons}</div>`;\n}\n\nfunction handleFollowUp(text) {\n    addChatMessage(text, 'user');\n    hideQuickActions();\n    \n    setTimeout(() => {\n        const response = generateBotResponse(text);\n        addChatMessage(response.text, 'bot', response.followUp);\n    }, 1000);\n}\n\nfunction generateBotResponse(userMessage) {\n    const lowerMessage = userMessage.toLowerCase();\n    \n    // Detailed responses for specific queries\n    const responses = {\n        'digestive issues': {\n            text: \"For digestive harmony, try these Ayurvedic remedies:\\n\\n🫖 **Ginger Tea**: Boosts Agni (digestive fire)\\n🌿 **Triphala**: Gentle detox and regularity\\n🥄 **Cumin-Coriander-Fennel Tea**: Reduces bloating\\n🍯 **Warm water with honey & lemon**: Morning detox\\n\\nWould you like specific recipes or want to book a consultation at AyurSutra?\",\n            followUp: ['Get recipes', 'Book consultation', 'More remedies']\n        },\n        'stress & anxiety': {\n            text: \"Ayurveda views stress as Vata imbalance. Here's your calming toolkit:\\n\\n🧘 **Pranayama**: Deep breathing exercises\\n💆 **Abhyanga**: Self-massage with warm oil\\n🌿 **Ashwagandha**: Adaptogenic herb for stress\\n🛁 **Warm baths with Epsom salt**: Evening ritual\\n🎵 **Meditation**: 10-15 minutes daily\\n\\nShall I guide you through a quick breathing exercise?\",\n            followUp: ['Breathing exercise', 'Meditation guide', 'Book therapy']\n        },\n        'what is panchakarma?': {\n            text: \"Panchakarma is Ayurveda's ultimate detox and rejuvenation program! 🌟\\n\\n**5 Main Therapies:**\\n1. **Vamana** - Therapeutic vomiting\\n2. **Virechana** - Purgation therapy\\n3. **Basti** - Medicated enemas\\n4. **Nasya** - Nasal administration\\n5. **Raktamokshana** - Blood purification\\n\\n**Benefits:**\\n✨ Deep detoxification\\n💪 Improved immunity\\n🧠 Mental clarity\\n⚡ Increased energy\\n\\nReady to start your transformation journey with AyurSutra?\",\n            followUp: ['Book consultation', 'Learn more', 'See packages']\n        }\n    };\n    \n    // Check for specific responses\n    for (const [key, response] of Object.entries(responses)) {\n        if (lowerMessage.includes(key)) {\n            return response;\n        }\n    }\n    \n    // Keyword-based responses\n    if (lowerMessage.includes('book') || lowerMessage.includes('appointment')) {\n        return {\n            text: \"I'd be happy to help you book an appointment at AyurSutra! 📅\\n\\nOur available services:\\n🌿 Consultation with Ayurvedic doctor\\n💆 Panchakarma therapies\\n🧘 Yoga & meditation sessions\\n📚 Lifestyle counseling\\n\\nWhich service interests you?\",\n            followUp: ['Doctor consultation', 'Panchakarma package', 'Yoga sessions']\n        };\n    } else if (lowerMessage.includes('price') || lowerMessage.includes('cost')) {\n        return {\n            text: \"Our AyurSutra therapy packages are designed to be accessible: 💰\\n\\n🌟 **Basic Consultation**: ₹1,500\\n🌸 **Panchakarma (3 days)**: ₹12,000\\n🌺 **Complete Package (7 days)**: ₹28,000\\n💎 **Luxury Retreat (14 days)**: ₹55,000\\n\\n*Prices include consultation, therapies, medicines & meals*\\n\\nWould you like to know more about any package?\",\n            followUp: ['Package details', 'Book now', 'Payment options']\n        };\n    } else if (lowerMessage.includes('location') || lowerMessage.includes('address')) {\n        return {\n            text: \"We're located in the heart of Kerala, India's Ayurveda capital! 📍\\n\\n🏥 **AyurSutra Wellness Center**\\nKumarakom, Kottayam District\\nKerala, India 686563\\n\\n📞 Phone: +91-9876543210\\n📧 Email: info@ayursutra.com\\n\\n🚗 Free pickup available from Cochin Airport\\n🏨 On-site accommodation available\\n\\nNeed directions or transport arrangement?\",\n            followUp: ['Get directions', 'Book transport', 'Accommodation options']\n        };\n    } else if (lowerMessage.includes('thank')) {\n        return {\n            text: \"You're most welcome! 🙏 It's my pleasure to help you on your wellness journey with AyurSutra. Remember, Ayurveda is about creating harmony between mind, body, and spirit.\\n\\nIs there anything else I can assist you with today?\",\n            followUp: ['Book appointment', 'More questions', 'End chat']\n        };\n    }\n    \n    // Default response\n    return {\n        text: \"I understand you're interested in Ayurvedic wellness! While I may not have a specific answer to that question, I can help with:\\n\\n🌿 Dosha assessment & constitution analysis\\n💊 Natural remedies for common ailments\\n📅 Booking Panchakarma therapies\\n🥗 Personalized diet recommendations\\n🧘 Lifestyle guidance based on Ayurvedic principles\\n\\nWhat would you like to explore at AyurSutra?\",\n        followUp: ['Find my Dosha', 'Natural remedies', 'Book therapy', 'Diet advice']\n    };\n}\n\nfunction showTypingIndicator() {\n    const messagesContainer = document.getElementById('chatbot-messages');\n    const typingHTML = `\n        <div class=\"message bot-message typing-message\">\n            <div class=\"message-avatar\">🤖</div>\n            <div class=\"message-content\">\n                <div class=\"typing-indicator\">\n                    <div class=\"typing-dots\">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </div>\n                    <span class=\"typing-text\">AyurBot is typing...</span>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    messagesContainer.insertAdjacentHTML('beforeend', typingHTML);\n    scrollChatToBottom();\n}\n\nfunction hideTypingIndicator() {\n    const typingMessage = document.querySelector('.typing-message');\n    if (typingMessage) {\n        typingMessage.remove();\n    }\n}\n\nfunction hideQuickActions() {\n    const quickActions = document.querySelector('.quick-actions');\n    if (quickActions) {\n        quickActions.style.display = 'none';\n    }\n}\n\nfunction scrollChatToBottom() {\n    const messagesContainer = document.getElementById('chatbot-messages');\n    messagesContainer.scrollTop = messagesContainer.scrollHeight;\n}\n\nfunction showChatbotNotification() {\n    const notification = document.createElement('div');\n    notification.className = 'chatbot-notification';\n    notification.innerHTML = `\n        <div class=\"notification-content\">\n            <div class=\"notification-avatar\">🤖</div>\n            <div class=\"notification-text\">\n                <strong>Hi! I'm AyurBot from AyurSutra</strong>\n                <p>Ask me about Ayurvedic remedies, book therapies, or get wellness advice!</p>\n            </div>\n            <button class=\"notification-close\" onclick=\"this.parentElement.remove()\">×</button>\n        </div>\n    `;\n    \n    notification.style.cssText = `\n        position: fixed;\n        bottom: 100px;\n        right: 20px;\n        background: linear-gradient(135deg, #4CAF50, #66BB6A);\n        color: white;\n        padding: 16px;\n        border-radius: 16px;\n        box-shadow: 0 8px 25px rgba(76, 175, 80, 0.3);\n        max-width: 300px;\n        z-index: 9998;\n        animation: notification-slide-in 0.5s ease-out;\n    `;\n    \n    document.body.appendChild(notification);\n    \n    // Auto-hide after 8 seconds\n    setTimeout(() => {\n        if (notification.parentElement) {\n            notification.style.animation = 'notification-slide-out 0.3s ease-in';\n            setTimeout(() => notification.remove(), 300);\n        }\n    }, 8000);\n}\n\n// ===== ENHANCED AUTHENTICATION SYSTEM =====\nfunction initializeAuthSystem() {\n    // Check for existing session\n    checkAuthState();\n    \n    // Initialize password toggle functionality\n    initializePasswordToggles();\n    \n    // Initialize social login buttons\n    initializeSocialLogin();\n    \n    // Initialize form validation\n    initializeFormValidation();\n}\n\nfunction initializePasswordToggles() {\n    // Add password toggle buttons to password fields\n    const passwordFields = document.querySelectorAll('input[type=\"password\"]');\n    passwordFields.forEach(field => {\n        if (!field.nextElementSibling || !field.nextElementSibling.classList.contains('password-toggle')) {\n            const toggle = document.createElement('button');\n            toggle.type = 'button';\n            toggle.className = 'password-toggle';\n            toggle.innerHTML = '<i class=\"fas fa-eye\"></i>';\n            toggle.onclick = () => togglePasswordVisibility(field, toggle);\n            \n            field.parentNode.appendChild(toggle);\n        }\n    });\n}\n\nfunction togglePasswordVisibility(field, button) {\n    const isPassword = field.type === 'password';\n    field.type = isPassword ? 'text' : 'password';\n    button.innerHTML = isPassword ? '<i class=\"fas fa-eye-slash\"></i>' : '<i class=\"fas fa-eye\"></i>';\n    \n    // Add animation\n    button.style.transform = 'scale(0.9)';\n    setTimeout(() => {\n        button.style.transform = 'scale(1)';\n    }, 150);\n}\n\nfunction initializeSocialLogin() {\n    // Add social login options to forms\n    const forms = document.querySelectorAll('.modal-form');\n    forms.forEach(form => {\n        if (!form.querySelector('.social-login')) {\n            const socialHTML = `\n                <div class=\"social-login\">\n                    <div class=\"social-divider\">\n                        <span>or continue with</span>\n                    </div>\n                    <div class=\"social-buttons\">\n                        <button type=\"button\" class=\"social-btn google\" onclick=\"socialLogin('google')\">\n                            <i class=\"fab fa-google\"></i>\n                        </button>\n                        <button type=\"button\" class=\"social-btn facebook\" onclick=\"socialLogin('facebook')\">\n                            <i class=\"fab fa-facebook-f\"></i>\n                        </button>\n                        <button type=\"button\" class=\"social-btn apple\" onclick=\"socialLogin('apple')\">\n                            <i class=\"fab fa-apple\"></i>\n                        </button>\n                    </div>\n                </div>\n            `;\n            \n            const submitButton = form.querySelector('.btn-primary');\n            submitButton.insertAdjacentHTML('afterend', socialHTML);\n        }\n    });\n}\n\nfunction socialLogin(provider) {\n    // Simulate social login\n    showLoadingState(`Connecting to ${provider}...`);\n    \n    setTimeout(() => {\n        hideLoadingState();\n        showNotification(`${provider} login will be available soon in AyurSutra!`, 'info');\n    }, 2000);\n}\n\nfunction initializeFormValidation() {\n    const forms = document.querySelectorAll('.modal-form');\n    forms.forEach(form => {\n        const inputs = form.querySelectorAll('input, select');\n        inputs.forEach(input => {\n            input.addEventListener('blur', () => validateField(input));\n            input.addEventListener('input', () => clearFieldError(input));\n        });\n    });\n}\n\nfunction validateField(field) {\n    const value = field.value.trim();\n    const type = field.type;\n    const isRequired = field.hasAttribute('required');\n    \n    clearFieldError(field);\n    \n    if (isRequired && !value) {\n        showFieldError(field, 'This field is required');\n        return false;\n    }\n    \n    if (type === 'email' && value) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(value)) {\n            showFieldError(field, 'Please enter a valid email address');\n            return false;\n        }\n    }\n    \n    if (type === 'password' && value) {\n        if (value.length < 8) {\n            showFieldError(field, 'Password must be at least 8 characters');\n            return false;\n        }\n    }\n    \n    return true;\n}\n\nfunction showFieldError(field, message) {\n    clearFieldError(field);\n    \n    const error = document.createElement('div');\n    error.className = 'field-error';\n    error.textContent = message;\n    error.style.cssText = `\n        color: #f44336;\n        font-size: 12px;\n        margin-top: 4px;\n        animation: shake 0.3s ease-in-out;\n    `;\n    \n    field.parentNode.appendChild(error);\n    field.style.borderColor = '#f44336';\n}\n\nfunction clearFieldError(field) {\n    const error = field.parentNode.querySelector('.field-error');\n    if (error) {\n        error.remove();\n    }\n    field.style.borderColor = '';\n}\n\nfunction checkAuthState() {\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n        // Update UI for logged-in state\n        updateAuthUI(true);\n    }\n}\n\nfunction updateAuthUI(isLoggedIn) {\n    const authButtons = document.querySelector('.auth-buttons');\n    if (authButtons) {\n        if (isLoggedIn) {\n            authButtons.innerHTML = `\n                <button class=\"btn-secondary\" onclick=\"showUserMenu()\">\n                    <i class=\"fas fa-user\"></i> Profile\n                </button>\n                <button class=\"btn-primary\" onclick=\"logout()\">Logout</button>\n            `;\n        } else {\n            authButtons.innerHTML = `\n                <button class=\"btn-secondary\" onclick=\"openModal('login')\">Login</button>\n                <button class=\"btn-primary\" onclick=\"openModal('signup')\">Sign Up</button>\n            `;\n        }\n    }\n}\n\nfunction logout() {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('user_data');\n    updateAuthUI(false);\n    showNotification('You have been logged out successfully from AyurSutra', 'success');\n}\n\n// ===== ENHANCED MODAL FUNCTIONS =====\nfunction enhanceModals() {\n    // Add enhanced animations and interactions to existing modals\n    const modals = document.querySelectorAll('.modal');\n    modals.forEach(modal => {\n        // Add backdrop click to close\n        modal.addEventListener('click', (e) => {\n            if (e.target === modal) {\n                const modalId = modal.id.replace('Modal', '');\n                closeModal(modalId);\n            }\n        });\n        \n        // Add escape key handling\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape' && modal.classList.contains('active')) {\n                const modalId = modal.id.replace('Modal', '');\n                closeModal(modalId);\n            }\n        });\n    });\n}\n\n// Enhanced form submission with validation\nfunction handleFormSubmit(e) {\n    e.preventDefault();\n    const form = e.target;\n    const formData = new FormData(form);\n    \n    // Validate all fields\n    const inputs = form.querySelectorAll('input[required], select[required]');\n    let isValid = true;\n    \n    inputs.forEach(input => {\n        if (!validateField(input)) {\n            isValid = false;\n        }\n    });\n    \n    if (!isValid) {\n        showNotification('Please correct the errors below', 'error');\n        return;\n    }\n    \n    // Show loading state\n    const submitButton = form.querySelector('button[type=\"submit\"]');\n    const originalText = submitButton.textContent;\n    submitButton.textContent = 'Processing...';\n    submitButton.classList.add('loading');\n    submitButton.disabled = true;\n    \n    // Simulate API call\n    setTimeout(() => {\n        // Simulate successful response\n        const isLogin = form.closest('#loginModal');\n        const isSignup = form.closest('#signupModal');\n        \n        if (isLogin) {\n            // Store auth token\n            localStorage.setItem('auth_token', 'demo_token_' + Date.now());\n            localStorage.setItem('user_data', JSON.stringify({\n                email: formData.get('email'),\n                name: 'Demo User'\n            }));\n            \n            updateAuthUI(true);\n            showNotification('Welcome back to AyurSutra! Login successful.', 'success');\n        } else if (isSignup) {\n            // Store auth token\n            localStorage.setItem('auth_token', 'demo_token_' + Date.now());\n            localStorage.setItem('user_data', JSON.stringify({\n                email: formData.get('email'),\n                name: formData.get('name')\n            }));\n            \n            updateAuthUI(true);\n            showNotification('Account created successfully! Welcome to AyurSutra.', 'success');\n        }\n        \n        // Reset form and close modal\n        form.reset();\n        const modal = form.closest('.modal');\n        if (modal) {\n            const modalId = modal.id.replace('Modal', '');\n            closeModal(modalId);\n        }\n        \n        // Reset button\n        submitButton.textContent = originalText;\n        submitButton.classList.remove('loading');\n        submitButton.disabled = false;\n        \n    }, 2000);\n}\n\n// ===== NAVIGATION FUNCTIONS =====\nfunction initializeNavigation() {\n    // Smooth scrolling for navigation links\n    const navLinks = document.querySelectorAll('.nav-link');\n    navLinks.forEach(link => {\n        link.addEventListener('click', (e) => {\n            e.preventDefault();\n            const targetId = link.getAttribute('href').substring(1);\n            scrollToSection(targetId);\n            updateActiveNavLink(link);\n        });\n    });\n\n    // Header scroll effect\n    window.addEventListener('scroll', handleHeaderScroll);\n}\n\nfunction updateActiveNavLink(activeLink) {\n    document.querySelectorAll('.nav-link').forEach(link => {\n        link.classList.remove('active');\n    });\n    activeLink.classList.add('active');\n}\n\nfunction handleHeaderScroll() {\n    const header = document.querySelector('.header');\n    if (window.scrollY > 100) {\n        header.style.background = 'rgba(255, 248, 225, 0.98)';\n        header.style.boxShadow = '0 2px 20px rgba(46, 125, 50, 0.1)';\n    } else {\n        header.style.background = 'rgba(255, 248, 225, 0.95)';\n        header.style.boxShadow = 'none';\n    }\n}\n\nfunction scrollToSection(sectionId) {\n    const section = document.getElementById(sectionId);\n    if (section) {\n        const headerHeight = 70;\n        const sectionTop = section.offsetTop - headerHeight;\n        \n        window.scrollTo({\n            top: sectionTop,\n            behavior: 'smooth'\n        });\n    }\n}\n\nfunction toggleMobileMenu() {\n    const navMenu = document.getElementById('nav-menu');\n    const hamburger = document.querySelector('.hamburger');\n    \n    isMenuOpen = !isMenuOpen;\n    \n    if (isMenuOpen) {\n        navMenu.style.display = 'flex';\n        navMenu.style.flexDirection = 'column';\n        navMenu.style.position = 'absolute';\n        navMenu.style.top = '70px';\n        navMenu.style.left = '0';\n        navMenu.style.width = '100%';\n        navMenu.style.background = 'var(--cream)';\n        navMenu.style.boxShadow = '0 5px 15px var(--shadow)';\n        navMenu.style.padding = 'var(--spacing-md)';\n        navMenu.style.zIndex = '1000';\n        \n        hamburger.classList.add('active');\n    } else {\n        navMenu.style.display = 'none';\n        hamburger.classList.remove('active');\n    }\n}\n\n// ===== ANIMATIONS =====\nfunction initializeAnimations() {\n    // Floating cards animation\n    animateFloatingCards();\n    \n    // Particle animation\n    createFloatingParticles();\n    \n    // Lotus animation\n    animateLotus();\n}\n\nfunction animateFloatingCards() {\n    const cards = document.querySelectorAll('.floating-card');\n    cards.forEach((card, index) => {\n        card.style.animationDelay = `${index * 2}s`;\n        \n        // Add hover effects\n        card.addEventListener('mouseenter', () => {\n            card.style.transform = 'translateY(-10px) scale(1.05)';\n            card.style.boxShadow = '0 15px 40px rgba(46, 125, 50, 0.2)';\n        });\n        \n        card.addEventListener('mouseleave', () => {\n            card.style.transform = 'translateY(0) scale(1)';\n            card.style.boxShadow = '0 10px 30px rgba(46, 125, 50, 0.1)';\n        });\n    });\n}\n\nfunction createFloatingParticles() {\n    const particleContainer = document.querySelector('.floating-particles');\n    \n    for (let i = 0; i < 20; i++) {\n        const particle = document.createElement('div');\n        particle.className = 'particle';\n        particle.style.cssText = `\n            position: absolute;\n            width: ${Math.random() * 4 + 2}px;\n            height: ${Math.random() * 4 + 2}px;\n            background: var(--light-green);\n            border-radius: 50%;\n            top: ${Math.random() * 100}%;\n            left: ${Math.random() * 100}%;\n            animation: particle-float ${Math.random() * 20 + 15}s linear infinite;\n            animation-delay: ${Math.random() * 10}s;\n            opacity: ${Math.random() * 0.5 + 0.2};\n        `;\n        particleContainer.appendChild(particle);\n    }\n}\n\nfunction animateLotus() {\n    const lotus = document.querySelector('.lotus-animation');\n    if (lotus) {\n        lotus.addEventListener('mouseenter', () => {\n            lotus.style.transform = 'scale(1.1)';\n            lotus.style.filter = 'drop-shadow(0 0 20px var(--secondary-green))';\n        });\n        \n        lotus.addEventListener('mouseleave', () => {\n            lotus.style.transform = 'scale(1)';\n            lotus.style.filter = 'none';\n        });\n    }\n}\n\n// ===== COUNTERS =====\nfunction initializeCounters() {\n    const counters = document.querySelectorAll('.stat-number');\n    const observerOptions = {\n        threshold: 0.7,\n        rootMargin: '0px 0px -100px 0px'\n    };\n\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                animateCounter(entry.target);\n                observer.unobserve(entry.target);\n            }\n        });\n    }, observerOptions);\n\n    counters.forEach(counter => observer.observe(counter));\n}\n\nfunction animateCounter(element) {\n    const target = parseInt(element.dataset.target);\n    const duration = 2000;\n    const start = 0;\n    const increment = target / (duration / 16);\n    let current = start;\n\n    const timer = setInterval(() => {\n        current += increment;\n        if (current >= target) {\n            current = target;\n            clearInterval(timer);\n        }\n        element.textContent = Math.floor(current);\n    }, 16);\n}\n\n// ===== PROGRESS CHART =====\nfunction initializeProgressChart() {\n    const canvas = document.getElementById('progressChart');\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    canvas.width = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n\n    // Sample data for demo\n    const data = {\n        labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],\n        datasets: [\n            {\n                label: 'Overall Health',\n                data: [65, 72, 78, 85],\n                color: '#2E7D32'\n            },\n            {\n                label: 'Sleep Quality',\n                data: [70, 75, 85, 92],\n                color: '#4CAF50'\n            },\n            {\n                label: 'Energy Levels',\n                data: [60, 68, 72, 78],\n                color: '#81C784'\n            }\n        ]\n    };\n\n    drawChart(ctx, data, canvas.width, canvas.height);\n}\n\nfunction drawChart(ctx, data, width, height) {\n    const padding = 40;\n    const chartWidth = width - 2 * padding;\n    const chartHeight = height - 2 * padding;\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, width, height);\n    \n    // Draw background\n    ctx.fillStyle = '#FFFFFF';\n    ctx.fillRect(0, 0, width, height);\n    \n    // Draw grid lines\n    ctx.strokeStyle = '#E0E0E0';\n    ctx.lineWidth = 1;\n    \n    for (let i = 0; i <= 5; i++) {\n        const y = padding + (chartHeight / 5) * i;\n        ctx.beginPath();\n        ctx.moveTo(padding, y);\n        ctx.lineTo(width - padding, y);\n        ctx.stroke();\n    }\n    \n    // Draw data lines\n    data.datasets.forEach((dataset, index) => {\n        ctx.strokeStyle = dataset.color;\n        ctx.lineWidth = 3;\n        ctx.beginPath();\n        \n        dataset.data.forEach((value, i) => {\n            const x = padding + (chartWidth / (data.labels.length - 1)) * i;\n            const y = padding + chartHeight - (value / 100) * chartHeight;\n            \n            if (i === 0) {\n                ctx.moveTo(x, y);\n            } else {\n                ctx.lineTo(x, y);\n            }\n            \n            // Draw points\n            ctx.fillStyle = dataset.color;\n            ctx.beginPath();\n            ctx.arc(x, y, 4, 0, 2 * Math.PI);\n            ctx.fill();\n        });\n        \n        ctx.stroke();\n    });\n    \n    // Draw labels\n    ctx.fillStyle = '#666';\n    ctx.font = '12px var(--font-primary)';\n    ctx.textAlign = 'center';\n    \n    data.labels.forEach((label, i) => {\n        const x = padding + (chartWidth / (data.labels.length - 1)) * i;\n        ctx.fillText(label, x, height - 10);\n    });\n}\n\n// ===== INTERSECTION OBSERVER =====\nfunction initializeIntersectionObserver() {\n    const observerOptions = {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px'\n    };\n\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.style.opacity = '1';\n                entry.target.style.transform = 'translateY(0)';\n            }\n        });\n    }, observerOptions);\n\n    // Observe feature cards\n    document.querySelectorAll('.feature-card').forEach(card => {\n        card.style.opacity = '0';\n        card.style.transform = 'translateY(50px)';\n        card.style.transition = 'all 0.6s ease';\n        observer.observe(card);\n    });\n}\n\n// ===== THERAPY TABS =====\nfunction initializeTherapyTabs() {\n    const tabs = document.querySelectorAll('.tab-button');\n    tabs.forEach(tab => {\n        tab.addEventListener('click', () => {\n            const therapyName = tab.textContent.toLowerCase();\n            showTherapy(therapyName);\n            \n            // Update active tab\n            tabs.forEach(t => t.classList.remove('active'));\n            tab.classList.add('active');\n        });\n    });\n}\n\nfunction showTherapy(therapyName) {\n    // Hide all panels\n    document.querySelectorAll('.therapy-panel').forEach(panel => {\n        panel.classList.remove('active');\n    });\n    \n    // Show selected panel\n    const selectedPanel = document.getElementById(therapyName);\n    if (selectedPanel) {\n        selectedPanel.classList.add('active');\n        currentTherapy = therapyName;\n        \n        // Animate panel entrance\n        selectedPanel.style.opacity = '0';\n        selectedPanel.style.transform = 'translateX(20px)';\n        \n        setTimeout(() => {\n            selectedPanel.style.transition = 'all 0.5s ease';\n            selectedPanel.style.opacity = '1';\n            selectedPanel.style.transform = 'translateX(0)';\n        }, 50);\n    }\n}\n\n// ===== MODAL FUNCTIONS =====\nfunction openModal(modalType) {\n    const modal = document.getElementById(`${modalType}Modal`);\n    if (modal) {\n        modal.classList.add('active');\n        modal.style.display = 'flex';\n        \n        // Animate modal entrance\n        const modalContent = modal.querySelector('.modal-content');\n        modalContent.style.transform = 'scale(0.7) translateY(-50px)';\n        modalContent.style.opacity = '0';\n        \n        setTimeout(() => {\n            modalContent.style.transition = 'all 0.3s ease';\n            modalContent.style.transform = 'scale(1) translateY(0)';\n            modalContent.style.opacity = '1';\n        }, 50);\n        \n        // Prevent body scroll\n        document.body.style.overflow = 'hidden';\n    }\n}\n\nfunction closeModal(modalType) {\n    const modal = document.getElementById(`${modalType}Modal`);\n    if (modal) {\n        const modalContent = modal.querySelector('.modal-content');\n        modalContent.style.transform = 'scale(0.7) translateY(-50px)';\n        modalContent.style.opacity = '0';\n        \n        setTimeout(() => {\n            modal.classList.remove('active');\n            modal.style.display = 'none';\n            document.body.style.overflow = 'auto';\n        }, 300);\n    }\n}\n\n// ===== FORM HANDLING =====\nfunction initializeForms() {\n    const forms = document.querySelectorAll('form');\n    forms.forEach(form => {\n        form.addEventListener('submit', handleFormSubmit);\n        \n        // Initialize floating labels\n        const inputs = form.querySelectorAll('input, textarea');\n        inputs.forEach(input => {\n            input.addEventListener('focus', handleInputFocus);\n            input.addEventListener('blur', handleInputBlur);\n        });\n    });\n}\n\nfunction handleInputFocus(e) {\n    const input = e.target;\n    const label = input.nextElementSibling;\n    if (label && label.tagName === 'LABEL') {\n        label.style.transform = 'translateY(-25px) translateX(-10px) scale(0.8)';\n        label.style.color = 'var(--primary-green)';\n    }\n}\n\nfunction handleInputBlur(e) {\n    const input = e.target;\n    const label = input.nextElementSibling;\n    if (label && label.tagName === 'LABEL' && !input.value) {\n        label.style.transform = 'translateY(0) translateX(0) scale(1)';\n        label.style.color = 'var(--earth-brown)';\n    }\n}\n\n// ===== NOTIFICATION SYSTEM =====\nfunction showNotification(message, type = 'info') {\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.innerHTML = `\n        <div class=\"notification-content\">\n            <i class=\"fas fa-${getNotificationIcon(type)}\"></i>\n            <span>${message}</span>\n        </div>\n        <button class=\"notification-close\" onclick=\"closeNotification(this)\">\n            <i class=\"fas fa-times\"></i>\n        </button>\n    `;\n    \n    // Style the notification\n    notification.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: var(--white);\n        color: var(--dark-gray);\n        padding: var(--spacing-md);\n        border-radius: var(--radius-md);\n        box-shadow: 0 10px 30px var(--shadow-dark);\n        z-index: var(--z-tooltip);\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        min-width: 300px;\n        max-width: 400px;\n        transform: translateX(100%);\n        transition: transform var(--transition-normal);\n        border-left: 4px solid var(--${type === 'success' ? 'secondary-green' : type === 'error' ? 'saffron' : 'primary-green'});\n    `;\n    \n    document.body.appendChild(notification);\n    \n    // Animate in\n    setTimeout(() => {\n        notification.style.transform = 'translateX(0)';\n    }, 100);\n    \n    // Auto remove after 5 seconds\n    setTimeout(() => {\n        closeNotification(notification.querySelector('.notification-close'));\n    }, 5000);\n}\n\nfunction getNotificationIcon(type) {\n    switch (type) {\n        case 'success': return 'check-circle';\n        case 'error': return 'exclamation-circle';\n        case 'warning': return 'exclamation-triangle';\n        default: return 'info-circle';\n    }\n}\n\nfunction closeNotification(button) {\n    const notification = button.closest('.notification');\n    notification.style.transform = 'translateX(100%)';\n    setTimeout(() => {\n        notification.remove();\n    }, 300);\n}\n\n// ===== UTILITY FUNCTIONS =====\nfunction setCookie(name, value, days) {\n    const expires = new Date();\n    expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));\n    document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/`;\n}\n\nfunction getCookie(name) {\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) return parts.pop().split(';').shift();\n}\n\nfunction showLoadingState(message = 'Loading...') {\n    const loader = document.createElement('div');\n    loader.id = 'global-loader';\n    loader.innerHTML = `\n        <div class=\"loader-content\">\n            <div class=\"lotus-loader\">🪷</div>\n            <p>${message}</p>\n        </div>\n    `;\n    loader.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(46, 125, 50, 0.9);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        z-index: 99999;\n        color: white;\n        font-family: var(--font-primary);\n    `;\n    \n    document.body.appendChild(loader);\n}\n\nfunction hideLoadingState() {\n    const loader = document.getElementById('global-loader');\n    if (loader) {\n        loader.remove();\n    }\n}\n\n// Add CSS animations for new features\nconst additionalStyles = `\n    <style>\n    @keyframes notification-slide-in {\n        from {\n            transform: translateX(100%);\n            opacity: 0;\n        }\n        to {\n            transform: translateX(0);\n            opacity: 1;\n        }\n    }\n    \n    @keyframes notification-slide-out {\n        from {\n            transform: translateX(0);\n            opacity: 1;\n        }\n        to {\n            transform: translateX(100%);\n            opacity: 0;\n        }\n    }\n    \n    @keyframes shake {\n        0%, 100% { transform: translateX(0); }\n        25% { transform: translateX(-5px); }\n        75% { transform: translateX(5px); }\n    }\n    \n    .lotus-loader {\n        font-size: 3rem;\n        animation: lotus-spin 2s ease-in-out infinite;\n    }\n    \n    @keyframes lotus-spin {\n        0% { transform: rotate(0deg) scale(1); }\n        50% { transform: rotate(180deg) scale(1.2); }\n        100% { transform: rotate(360deg) scale(1); }\n    }\n    \n    .chatbot-notification {\n        cursor: pointer;\n        transition: all 0.3s ease;\n    }\n    \n    .chatbot-notification:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 12px 35px rgba(76, 175, 80, 0.4);\n    }\n    \n    .notification-content {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n    }\n    \n    .notification-avatar {\n        font-size: 24px;\n    }\n    \n    .notification-close {\n        background: none;\n        border: none;\n        color: white;\n        font-size: 20px;\n        cursor: pointer;\n        padding: 0;\n        margin-left: auto;\n    }\n    </style>\n`;\n\ndocument.head.insertAdjacentHTML('beforeend', additionalStyles);\n\n// Initialize everything when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initializeApp);\n} else {\n    initializeApp();\n}"],"names":["currentTherapy","isChatbotOpen","initializeApp","document","querySelectorAll","forEach","link","addEventListener","e","activeLink","preventDefault","sectionId","section","getElementById","headerHeight","sectionTop","offsetTop","window","scrollTo","top","behavior","scrollToSection","getAttribute","substring","classList","remove","add","handleHeaderScroll","card","index","style","animationDelay","concat","transform","boxShadow","particleContainer","querySelector","i","particle","createElement","className","cssText","Math","random","appendChild","createFloatingParticles","lotus","filter","animateLotus","counters","observer","IntersectionObserver","entries","entry","isIntersecting","element","target","parseInt","dataset","increment","current","timer","setInterval","clearInterval","textContent","floor","animateCounter","unobserve","threshold","rootMargin","counter","observe","initializeCounters","canvas","ctx","getContext","width","offsetWidth","height","offsetHeight","data","padding","chartWidth","chartHeight","clearRect","fillStyle","fillRect","strokeStyle","lineWidth","y","beginPath","moveTo","lineTo","stroke","datasets","color","value","x","labels","length","arc","PI","fill","font","textAlign","label","fillText","drawChart","initializeProgressChart","opacity","transition","initializeIntersectionObserver","tabs","tab","therapyName","panel","selectedPanel","setTimeout","showTherapy","toLowerCase","t","initializeTherapyTabs","form","handleFormSubmit","input","handleInputFocus","handleInputBlur","chatbotToggle","innerHTML","setAttribute","title","toggleChatbot","body","chatbotHTML","Date","toLocaleTimeString","hour","minute","insertAdjacentHTML","createChatbotInterface","name","parts","cookie","split","pop","shift","getCookie","notification","parentElement","animation","showChatbotNotification","days","expires","setTime","getTime","toUTCString","setCookie","initializeChatbot","localStorage","getItem","updateAuthUI","field","nextElementSibling","contains","toggle","type","onclick","button","isPassword","togglePasswordVisibility","parentNode","socialHTML","validateField","clearFieldError","modal","closeModal","id","replace","key","chatbotContainer","display","overflow","focus","trim","isRequired","hasAttribute","showFieldError","test","message","error","borderColor","isLoggedIn","authButtons","formData","FormData","inputs","isValid","showNotification","submitButton","originalText","disabled","isLogin","closest","isSignup","setItem","now","JSON","stringify","email","get","reset","header","scrollY","background","modalType","modalContent","tagName","arguments","undefined","getNotificationIcon","closeNotification","head","readyState"],"sourceRoot":""}